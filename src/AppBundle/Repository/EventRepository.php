<?php

/*
 *     Iker Ibarguren <@ikerib>
 *
 * This source file is subject to the MIT license that is bundled
 * with this source code in the file LICENSE.
 */

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * EventRepository.
 *
 * This class was generated by the PhpStorm "Php Annotations" Plugin. Add your own custom
 * repository methods below.
 */
class EventRepository extends EntityRepository
{
    public function getEvents($calendarid)
    {
        $em = $this->getEntityManager();
        /** @var $query \Doctrine\DBAL\Query\QueryBuilder */
        $query = $em->createQuery('
            SELECT e
                FROM AppBundle:Event e
                  LEFT JOIN e.calendar c
                WHERE c.id = :calendarid
        ');

        //$consulta = $em->createQuery($dql);
        $query->setParameter('calendarid', $calendarid);

        return $query->getResult();
    }

    public function findCalendarSelfEvents($calendarid)
    {

        // TODO: Remove hardcoded type id

        $em = $this->getEntityManager();
        /** @var $query \Doctrine\DBAL\Query\QueryBuilder */
        $query = $em->createQuery('
            SELECT e
                FROM AppBundle:Event e
                  LEFT JOIN e.calendar c
                WHERE c.id = :calendarid
                AND e.type = 5
        ');

        $query->setParameter('calendarid', $calendarid);

        return $query->getResult();
    }

    public function checkCollision($userid, $fini, $ffin)
    {
        $qb = $this->createQueryBuilder('e');

        $qb->innerJoin('e.calendar', 'c')
            ->innerJoin('c.user', 'u')
            ->where('u.id=:userid')
            //->andWhere($qb->expr()->between(':fini', 'e.start_date', 'e.end_date'))
            ->andWhere('(:fini BETWEEN e.start_date AND e.end_date) OR (:ffin BETWEEN e.start_date AND e.end_date)')
            ->setParameter('userid', $userid)
            ->setParameter('fini', $fini)
            ->setParameter('ffin', $ffin)
        ;

        return $qb->getQuery()->getResult();
    }

    public function findKonpentsatuak($hasi=null, $fin=null, $urtea=null, $saila=null, $lanpostua=null, $mota = null)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->select('SUM(e.hours) as suma', 'c.id as calendarid', 'u.id', 'u.username', 'u.department', 'u.lanpostua', 'c.year');
        $qb->innerJoin('e.calendar', 'c');
        $qb->innerJoin('e.type', 't');
        $qb->innerJoin('c.user', 'u');
        $qb->groupBy('c.id');


        if ($mota) {
            $qb->andWhere('e.type = :mota')->setParameter('mota', $mota);
        }
        if ($urtea) {
            $qb->andWhere('c.year = :urtea')->setParameter('urtea', $urtea);
        }
        if ($hasi) {
            $qb->andWhere('e.start_date > :hasi')->setParameter('hasi', $hasi);
        }
        if ($fin) {
            $qb->andWhere('e.end_date < :fin')->setParameter('fin', $fin);
        }
        if ($saila) {
            $qb->andWhere('u.department = :saila')->setParameter('saila', $saila);
        }
        if ($lanpostua) {
            $qb->andWhere('u.lanpostua = :lanpostua')->setParameter('lanpostua', $lanpostua);
        }
        $qb->orderBy('u.department');
        $sql = $qb->getQuery()->getSQL();

        return $qb->getQuery()->getResult();
    }

    public function findKonpentsatuakdet($hasi=null, $fin=null, $urtea=null, $saila=null, $lanpostua=null, $mota = null)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->select('e.hours as suma', 'e.start_date as fetxa','c.id as calendarid', 'u.id', 'u.username', 'u.department', 'u.lanpostua', 'c.year');
        $qb->innerJoin('e.calendar', 'c');
        $qb->innerJoin('e.type', 't');
        $qb->innerJoin('c.user', 'u');


        if ($mota) {
            $qb->andWhere('e.type = :mota')->setParameter('mota', $mota);
        }
        if ($urtea) {
            $qb->andWhere('c.year = :urtea')->setParameter('urtea', $urtea);
        }
        if ($hasi) {
            $qb->andWhere('e.start_date > :hasi')->setParameter('hasi', $hasi);
        }
        if ($fin) {
            $qb->andWhere('e.end_date < :fin')->setParameter('fin', $fin);
        }
        if ($saila) {
            $qb->andWhere('u.department = :saila')->setParameter('saila', $saila);
        }
        if ($lanpostua) {
            $qb->andWhere('u.lanpostua = :lanpostua')->setParameter('lanpostua', $lanpostua);
        }
        $qb->orderBy('u.department');
        $sql = $qb->getQuery()->getSQL();

        return $qb->getQuery()->getResult();
    }

    public function getUserYearEvents($userid, $year) {
        $start = $year . "-01-01";
        ++$year;
        $end = $year . "-01-06";
        $qb = $this->createQueryBuilder('e')
            ->select('e,c,u')
            ->innerJoin('e.calendar', 'c')
            ->innerJoin('c.user', 'u')
            ->andWhere('e.start_date between :start and :end')
            ->setParameter('start', $start)
            ->setParameter('end', $end)
            ->andWhere('u.id = :userid')
            ->setParameter('userid', $userid)
            ->orderBy('e.start_date','ASC')
        ;

        return $qb->getQuery()->getResult();
    }
}
